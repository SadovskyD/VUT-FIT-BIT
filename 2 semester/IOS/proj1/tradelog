#!/usr/bin/env bash

########################################################
# Soubor:  tradelog                                    #
# Datum:   06.04.2021                                  #
# Autor:   Dmytro Sadovskyi, xsadov06@                 #
# Projekt: IOS c. 1                                    #
########################################################

POSIXLY_CORRECT=yes

IFS=';'

declare -A filter_flags #array of filters

t_counter=0 #ticker counter

filter_flags[w]="1"

if [ "$1" = "--help" -o "$1" = "-h" ]
	then
        echo '
POUŽITÍ:

	tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]

PŘÍKAZ může být jeden z:

	list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”.
	profit – výpis celkového zisku z uzavřených pozic.
	pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.
	last-price – výpis poslední známé ceny pro každý ticker.
	hist-ord – výpis histogramu počtu transakcí dle tickeru.
	graph-pos – výpis grafu hodnot držených pozic dle tickeru.

FILTR může být kombinace následujících:

	-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS.
	-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
	-t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více výskytech přepínače se bere množina všech uvedených tickerů.
	-w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění.
	-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače.'
        exit 0
fi

#Reading parameters
while getopts ":a:b:w:t:" o 
do
  ((index=$OPTIND-2))
  ((argument=$OPTIND-1))
  case "$o" in
    w) if [ ${!index} = "-w" ]
        then
          [[ ${!argument} =~ ^[1-9][0-9]*+$ ]] || {
            echo Wrong filter. Use -h or --help to show help.
            exit 1
          }
          filter_flags[w]=${!argument}	
        else
          echo "Wrong filter. Use -h or --help to show help."; exit 1	
        fi;;
    t) if [ ${!index} = "-t" ]
        then
          test ${!argument} || {
            echo Wrong filter. Use -h or --help to show help
            exit 1
          }
          filter_flags[$t_counter]=${!argument}
		  ((t_counter++))
        else
          echo "Wrong filter. Use -h or --help to show help"; echo $err_msg; exit 1
        fi;;
    a|b) echo "${!argument}" | grep -qE '[0-9]{4}(\-[0-9]{2}){2}\ [0-9]{2}(:[0-9]{2}){2}' || {
				  echo Wrong date. Use -h or --help to show help
                  echo $err_msg
                  exit 1
          }; filter_flags[$o]=${!argument};;
    *) echo "Wrong filter. Use -h or --help to show help" ; exit 1;;	
  esac
done

((OPTIND--))
shift $OPTIND

if [ "$1" = "list-ip" ]; then
	prikaz=$1  
	shift 1
elif [ "$1" = "list-tick" ]; then
    prikaz="list-tick"
    shift 1
elif [ "$1" = "pos" ]; then
    prikaz="pos"
    shift 1
elif [ "$1" = "profit" ]; then
    prikaz="profit"
    shift 1
elif [ "$1" = "last-price" ]; then
    prikaz="last-price"
	shift 1
elif [ "$1" = "hist-ord" ]; then
    prikaz="hist-ord"
    shift 1
elif [ "$1" = "graph-pos" ]; then
    prikaz="graph-pos"
	shift 1
fi

function filt_date() {
	if [ "$filter_flags[a]" != "" -o "filter_flags[b]" != "" ]	
	then
		if test "${filter_flags[a]}";
		then f_a=${filter_flags[a]}
		else f_a="0000-00-00 00:00:00"
		fi
		if test "${filter_flags[b]}";
		then f_b=${filter_flags[b]}
		else f_b="9999-99-99 99:99:99"
		fi	
		while read log_date tick t_type price currency volume identificator; do
			if [[ "$log_date" > "$f_a" ]] && [[ "$log_date" < "$f_b" ]];
			then echo $log_date";"$tick";"$t_type";"$price";"$currency";"$volume";"$identificator
			fi
		done
	else echo $log_date";"$tick";"$t_type";"$price";"$currency";"$volume";"$identificator
	fi
}

function filt_ticker () {

	while read log_date tick t_type price currency volume identificator; do
		if ((t_counter > 0))
		then
			for (( i=0; i < t_counter; i++ ))
			do
				test $tick = ${filter_flags[$i]} && echo $log_date";"$tick";"$t_type";"$price";"$currency";"$volume";"$identificator
			done
		else
		echo $log_date";"$tick";"$t_type";"$price";"$currency";"$volume";"$identificator
		fi
  done

}

commands () {
    case "$prikaz" in
		"list-tick")	
			awk -F\; '{print $2}' | sort | uniq;;
		"profit")
			awk -v prof=0 -F\; '
			{
			if ($3 == "sell") prof= prof + $4 * $6
			else prof= prof - $4 * $6
			} END {printf "%.2f\n", prof}';;
		"pos")
			awk -F\; '{print $1";"$2";"$3";"$4";"$6}' | sort -t ";" -k 2,2 | awk -v pos=0 -v tick="" -v price=0 -v time="" -F\; '
			{
				if (length(tick) == 0)
					{
						tick= $2
						price= $4
						time= $1
						if ($3 == "buy") pos= pos + $5; else pos= pos - $5
					}
				else
					{
					if (tick == $2)
						{
							if (time < $1)
								{
									price= $4
									time= $1
								}
							if ($3 == "buy") pos= pos + $5; else pos= pos - $5
						}
					else
						{
							pos= price * pos
							if (length(tick) != 0) printf "%-10s:%12.2f\n", tick, pos
							time= $1
							pos= 0
							tick= $2
							price= $4
							if ($3 == "buy") pos= pos + $5; else pos= pos - $5
						}
					}
			} END {pos= price * pos; if (length(tick) != 0) printf "%-10s:%12.2f\n", tick, pos}
			'| sort -rnk 3;;
		"last-price")
		awk -F\; '{print $1";"$2";"$4}' | sort -t ";" -k 2,2 | awk -v tick="" -v price=0 -v time="" -F\; '
			{
				if (length(tick) == 0)
					{
						tick= $2
						price= $3
						time= $1
					}
				else
					{
						if (tick == $2)
						{
							if (time < $1)
								{
									price= $3
									time= $1
								}
						}
					else
						{
							if (length(tick) != 0) printf "%-10s:%12.2f\n", tick, price
							time= $1
							tick= $2
							price= $3
						}
					}
			} END {if (length(tick) != 0) printf "%-10s:%12.2f\n", tick, price}
			'| sort -nk 1,1;;
		"hist-ord") 
		awk -F\; '{print $2}' | sort | awk -v tick="" -v width="${filter_flags[w]}" -v count=1 '
			{
				if (length(tick) == 0)
				{
						tick= $1
						count= 1
				}
				else
				{
					if (tick == $1)
					{
						count= count + 1
					}
					else
					{	if (length(tick) != 0)
						{
								printf "%-10s:", tick
								for (ind= 1; ind <= count / width; ind++)
								{
									printf "#"
								}
							printf "\n"
							tick= $1
							count=1;
						}
					}
				}
			} END {if (length(tick) != 0)
				    {
						printf "%-10s:", tick
						for (ind= 1; ind <= count / width; ind++){
						printf "#"
						}
					}
					printf "\n"
				  }';;
		"graph-pos")
		;; #TODO
      "")	awk '{print $0}';; 
  esac

}

if  [ "$1" = "" ];
then
	echo "$(cat)" | filt_date | filt_ticker | commands
	exit 0
else 
	for file in $@ 
	do
		if [ -f $file ]
		then
			if file --mime-type "$file" | grep -q gzip$;	#test for gz file
			then
				gunzip -c $file
			else
			cat $file
			fi
			else
			exit 1
		fi
	done | filt_date | filt_ticker | commands
fi
exit 0